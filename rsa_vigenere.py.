import random
from math import gcd

# --------------------------
# RSA UTILITAIRES
# --------------------------

def is_prime(n, k=5):
    if n <= 1: return False
    if n <= 3: return True
    if n % 2 == 0: return False
    r, d = 0, n - 1
    while d % 2 == 0:
        r += 1
        d //= 2
    for _ in range(k):
        a = random.randrange(2, n - 2)
        x = pow(a, d, n)
        if x in (1, n - 1): continue
        for _ in range(r - 1):
            x = pow(x, 2, n)
            if x == n - 1: break
        else:
            return False
    return True

def generate_prime(bits=512):
    while True:
        p = random.getrandbits(bits)
        p |= (1 << bits - 1) | 1
        if is_prime(p):
            return p

def modinv(a, m):
    m0, x0, x1 = m, 0, 1
    while a > 1:
        q = a // m
        m, a = a % m, m
        x0, x1 = x1 - q * x0, x0
    return x1 + m0 if x1 < 0 else x1

def generate_rsa_keys(bits=512):
    p = generate_prime(bits)
    q = generate_prime(bits)
    while q == p:
        q = generate_prime(bits)
    n = p * q
    phi = (p - 1) * (q - 1)
    e = 65537
    if gcd(e, phi) != 1:
        e = 3
        while gcd(e, phi) != 1:
            e += 2
    d = modinv(e, phi)
    return (e, n), (d, n)

def rsa_encrypt(message: str, public_key):
    e, n = public_key
    message_int = int.from_bytes(message.encode(), byteorder='big')
    if message_int >= n:
        raise ValueError("Message trop long pour la clé RSA.")
    return pow(message_int, e, n)

def rsa_decrypt(cipher_int: int, private_key):
    d, n = private_key
    message_int = pow(cipher_int, d, n)
    message_bytes = message_int.to_bytes((message_int.bit_length() + 7) // 8, byteorder='big')
    return message_bytes.decode()

# --------------------------
# VIGENÈRE
# --------------------------

def vigenere_decrypt(ciphertext, key):
    decrypted = []
    key = key.upper()
    key_len = len(key)
    key_index = 0
    for char in ciphertext:
        if char.isalpha():
            offset = ord('A') if char.isupper() else ord('a')
            key_char = key[key_index % key_len]
            key_val = ord(key_char.upper()) - ord('A')
            decrypted_char = chr((ord(char) - offset - key_val) % 26 + offset)
            decrypted.append(decrypted_char)
            key_index += 1
        else:
            decrypted.append(char)
    return ''.join(decrypted)

# --------------------------
# DÉMO FINALE
# --------------------------

if __name__ == "__main__":
    # 1. Génération des clés RSA
    print("Génération des clés RSA...")
    public_key, private_key = generate_rsa_keys(512)

    # 2. Clé de Vigenère (à chiffrer avec RSA)
    vigenere_key = "CLESECRETE"
    print("Clé Vigenère à chiffrer:", vigenere_key)

    rsa_cipher = rsa_encrypt(vigenere_key, public_key)
    print("Clé chiffrée RSA:", rsa_cipher)

    # 3. Déchiffrement RSA
    decrypted_key = rsa_decrypt(rsa_cipher, private_key)
    print("Clé Vigenère déchiffrée:", decrypted_key)

    # 4. Message chiffré avec Vigenère
    vigenere_cipher = "Vvkpi rvhz jgnz rm sjbtqtr"  # Chiffré avec CLESECRETE

    # 5. Déchiffrement Vigenère
    final_message = vigenere_decrypt(vigenere_cipher, decrypted_key)
    print("Message final déchiffré:", final_message)
